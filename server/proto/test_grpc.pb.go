// 使用proto3语法

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: test.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestHello_TestHello_FullMethodName = "/TestHello/TestHello"
)

// TestHelloClient is the client API for TestHello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestHelloClient interface {
	TestHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type testHelloClient struct {
	cc grpc.ClientConnInterface
}

func NewTestHelloClient(cc grpc.ClientConnInterface) TestHelloClient {
	return &testHelloClient{cc}
}

func (c *testHelloClient) TestHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, TestHello_TestHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestHelloServer is the server API for TestHello service.
// All implementations must embed UnimplementedTestHelloServer
// for forward compatibility
type TestHelloServer interface {
	TestHello(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedTestHelloServer()
}

// UnimplementedTestHelloServer must be embedded to have forward compatible implementations.
type UnimplementedTestHelloServer struct {
}

func (UnimplementedTestHelloServer) TestHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestHello not implemented")
}
func (UnimplementedTestHelloServer) mustEmbedUnimplementedTestHelloServer() {}

// UnsafeTestHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestHelloServer will
// result in compilation errors.
type UnsafeTestHelloServer interface {
	mustEmbedUnimplementedTestHelloServer()
}

func RegisterTestHelloServer(s grpc.ServiceRegistrar, srv TestHelloServer) {
	s.RegisterService(&TestHello_ServiceDesc, srv)
}

func _TestHello_TestHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestHelloServer).TestHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestHello_TestHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestHelloServer).TestHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestHello_ServiceDesc is the grpc.ServiceDesc for TestHello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestHello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TestHello",
	HandlerType: (*TestHelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestHello",
			Handler:    _TestHello_TestHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
